name: 🔄 CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: 🧪 Tests | Coverage | Pana
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: 🛒 Checkout
        uses: actions/checkout@v4

      - name: 🎯 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
          channel: 'stable'
          cache: true

      - name: 📦 Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            **/.dart_tool
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: 📚 Install Dependencies
        run: flutter pub get

      - name: 🔧 Install Pana & Coverage
        run: |
          dart pub global activate pana
          dart pub global activate coverage

      - name: 🔍 Analyze Code
        run: dart analyze lib --fatal-infos --fatal-warnings

      - name: 🧪 Run Tests
        run: flutter test --coverage --reporter=expanded


      - name: 📊 Generate Coverage Report
        run: |
          echo "📋 Checking coverage directory contents:"
          ls -la coverage/ || echo "Coverage directory not found"
          
          echo "📊 Generating LCOV report..."
          dart pub global run coverage:format_coverage --lcov --in=coverage --out=coverage/lcov.info --packages=.dart_tool/package_config.json --report-on=lib
          
          echo "📋 Checking if LCOV file was generated:"
          if [ -f "coverage/lcov.info" ]; then
            echo "✅ LCOV file generated successfully"
            echo "📄 File size: $(wc -l < coverage/lcov.info) lines"
          else
            echo "❌ LCOV file not generated"
            echo "📄 Coverage directory contents:"
            ls -la coverage/
            echo "📄 Raw coverage files:"
            find coverage -name "*.json" | head -5
          fi

      - name: 📈 Check Coverage Threshold
        run: |
          echo "🔍 Searching for coverage files..."
          find . -name "*.lcov" -o -name "lcov.info" -o -name "*.info" | head -10
          
          # Check if coverage file exists
          if [ -f "coverage/lcov.info" ]; then
            echo "📋 Using coverage file: coverage/lcov.info"
            
            # Debug: Show file content
            echo "📄 Coverage file content (first 10 lines):"
            head -10 "coverage/lcov.info"
            
            # Simple validation that file has LCOV format
            if grep -q "^SF:" "coverage/lcov.info" && grep -q "^LF:" "coverage/lcov.info"; then
              # Extract lines found (LF) and lines hit (LH) from LCOV
              echo "🔍 Extracting coverage data..."
              
              TOTAL_LINES=$(grep "^LF:" "coverage/lcov.info" | cut -d: -f2 | awk '{sum += $1} END {print sum+0}')
              COVERED_LINES=$(grep "^LH:" "coverage/lcov.info" | cut -d: -f2 | awk '{sum += $1} END {print sum+0}')
              
              echo "📊 Lines found: ${TOTAL_LINES:-0}"
              echo "📊 Lines covered: ${COVERED_LINES:-0}"
              
              # Validate numbers
              if [[ "$TOTAL_LINES" =~ ^[0-9]+$ ]] && [[ "$COVERED_LINES" =~ ^[0-9]+$ ]] && [ "$TOTAL_LINES" -gt 0 ]; then
                COVERAGE=$(echo "scale=1; ($COVERED_LINES * 100) / $TOTAL_LINES" | bc)
                echo "Coverage: $COVERAGE% ($COVERED_LINES/$TOTAL_LINES lines)"
                
                # Accept coverage >= 50% for security detection packages
                if (( $(echo "$COVERAGE >= 50" | bc -l) )); then
                  echo "✅ Coverage $COVERAGE% meets minimum requirement (50%)"
                else
                  echo "❌ Coverage $COVERAGE% below minimum requirement (50%)"
                  exit 1
                fi
              else
                echo "⚠️ Invalid coverage data - TOTAL_LINES: '$TOTAL_LINES', COVERED_LINES: '$COVERED_LINES'"
                echo "⚠️ Skipping coverage check for now"
              fi
            else
              echo "⚠️ Coverage file doesn't have expected LCOV format"
              echo "⚠️ Skipping coverage check for now"
            fi
          else
            echo "⚠️ No coverage file found at coverage/lcov.info"
            echo "📋 Available files in coverage directory:"
            ls -la coverage/ 2>/dev/null || echo "Coverage directory doesn't exist"
            echo "⚠️ Skipping coverage check for now"
          fi

      - name: 📤 Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: engine-security-coverage

      - name: 📊 Run Pana Analysis
        run: |
          dart pub global run pana --json > pana_report.json
          
          # Extract score
          SCORE=$(cat pana_report.json | jq -r '.scores.grantedPoints // 0')
          MAX_SCORE=$(cat pana_report.json | jq -r '.scores.maxPoints // 160')
          
          echo "Pana Score: $SCORE/$MAX_SCORE"
          
          # Require minimum score of 140/160 (87.5%)
          if [ "$SCORE" -ge 140 ]; then
            echo "✅ Pana score $SCORE/$MAX_SCORE passed minimum requirement (140/160)"
          else
            echo "❌ Pana score $SCORE/$MAX_SCORE below minimum requirement (140/160)"
            echo "Please check the pana_report.json for details"
            cat pana_report.json | jq '.report'
            exit 1
          fi

      - name: 📤 Upload Pana Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pana-report
          path: pana_report.json

  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: 🛒 Checkout
        uses: actions/checkout@v4

      - name: 🎯 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
          channel: 'stable'
          cache: true

      - name: 📦 Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            **/.dart_tool
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: 📚 Install Dependencies
        run: flutter pub get

      - name: 📈 Code Metrics
        run: |
          echo "📊 Calculating code metrics..."
          
          # Count lines of code
          LOC=$(find lib -name "*.dart" -exec wc -l {} + | tail -1 | awk '{print $1}')
          
          # Count files  
          FILES=$(find lib -name "*.dart" | wc -l)
          
          # Count classes
          CLASSES=$(grep -r "^class " lib --include="*.dart" | wc -l)
          
          echo "📈 Code Metrics:"
          echo "  - Lines of Code: $LOC"
          echo "  - Dart Files: $FILES" 
          echo "  - Classes: $CLASSES"
          echo "  - Average LOC per file: $((LOC / FILES))"

  publish:
    name: 📦 Publish Package
    runs-on: ubuntu-latest
    needs: [ test, security ]
    if: startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 5
    
    steps:
      - name: 🛒 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🎯 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
          channel: 'stable'
          cache: true

      - name: 📚 Install Dependencies
        run: flutter pub get
      - name: 🔑 Setup Pub Credentials
        run: |
          mkdir -p ~/.config/dart
          echo '${{ secrets.PUB_CREDENTIALS }}' > ~/.config/dart/pub-credentials.json

      - name: 📦 Publish to pub.dev
        run: dart pub publish --force