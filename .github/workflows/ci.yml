name: 🔄 CI/CD Pipeline

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: 🧪 Tests | Coverage | Pana
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: 🛒 Checkout
        uses: actions/checkout@v4

      - name: 🎯 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
          channel: 'stable'
          cache: true

      - name: 📦 Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            **/.dart_tool
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: 📚 Install Dependencies
        run: flutter pub get

      - name: 🔧 Install Pana & Coverage
        run: |
          dart pub global activate pana
          dart pub global activate coverage

      - name: 🔍 Analyze Code
        run: dart analyze lib --fatal-infos --fatal-warnings

      - name: 🧪 Run Tests
        run: flutter test --coverage --reporter=expanded


      - name: 📊 Generate Coverage Report
        run: |          
          dart pub global run coverage:format_coverage --lcov --in=coverage --out=coverage/lcov.info --packages=.dart_tool/package_config.json --report-on=lib

      - name: 📈 Check Coverage Threshold
        run: |
          dart pub global activate coverage
          COVERAGE=$(dart pub global run coverage:format_coverage --lcov --in=coverage --out=coverage/lcov.info --packages=.dart_tool/package_config.json --report-on=lib | grep -oP 'lines\.*: \K[0-9.]+(?=%)')
          echo "Coverage: $COVERAGE%"
          
          # Accept coverage >= 50% for security detection packages
          if (( $(echo "$COVERAGE >= 50" | bc -l) )); then
            echo "✅ Coverage $COVERAGE% meets minimum requirement (50%)"
          else
            echo "❌ Coverage $COVERAGE% below minimum requirement (50%)"
            exit 1
          fi

      - name: 📤 Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: engine-security-coverage

      - name: 📊 Run Pana Analysis
        run: |
          dart pub global run pana --json > pana_report.json
          
          # Extract score
          SCORE=$(cat pana_report.json | jq -r '.scores.grantedPoints // 0')
          MAX_SCORE=$(cat pana_report.json | jq -r '.scores.maxPoints // 160')
          
          echo "Pana Score: $SCORE/$MAX_SCORE"
          
          # Require minimum score of 140/160 (87.5%)
          if [ "$SCORE" -ge 140 ]; then
            echo "✅ Pana score $SCORE/$MAX_SCORE passed minimum requirement (140/160)"
          else
            echo "❌ Pana score $SCORE/$MAX_SCORE below minimum requirement (140/160)"
            echo "Please check the pana_report.json for details"
            cat pana_report.json | jq '.report'
            exit 1
          fi

      - name: 📤 Upload Pana Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pana-report
          path: pana_report.json

  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: 🛒 Checkout
        uses: actions/checkout@v4

      - name: 🎯 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
          channel: 'stable'
          cache: true

      - name: 📦 Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            **/.dart_tool
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: 📚 Install Dependencies
        run: flutter pub get

      - name: 📈 Code Metrics
        run: |
          echo "📊 Calculating code metrics..."
          
          # Count lines of code
          LOC=$(find lib -name "*.dart" -exec wc -l {} + | tail -1 | awk '{print $1}')
          
          # Count files  
          FILES=$(find lib -name "*.dart" | wc -l)
          
          # Count classes
          CLASSES=$(grep -r "^class " lib --include="*.dart" | wc -l)
          
          echo "📈 Code Metrics:"
          echo "  - Lines of Code: $LOC"
          echo "  - Dart Files: $FILES" 
          echo "  - Classes: $CLASSES"
          echo "  - Average LOC per file: $((LOC / FILES))"

  publish:
    name: 📦 Publish Package
    runs-on: ubuntu-latest
    needs: [ test, security ]
    if: startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 5
    
    steps:
      - name: 🛒 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🎯 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
          channel: 'stable'
          cache: true

      - name: 📚 Install Dependencies
        run: flutter pub get
      - name: 🔑 Setup Pub Credentials
        run: |
          mkdir -p ~/.config/dart
          echo '${{ secrets.PUB_CREDENTIALS }}' > ~/.config/dart/pub-credentials.json

      - name: 📦 Publish to pub.dev
        run: dart pub publish --force